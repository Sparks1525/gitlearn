1.git init
通过git init命令把这个目录变成Git可以管理的仓库

2.git add <file>
使用命令git add <file>，注意，可反复多次使用，添加多个文件到stage暂存区

3.git commit -m <message>
用命令git commit告诉Git，把文件提交到仓库

4.git status
要随时掌握工作区的状态，使用git status命令

5.git diff
如果git status告诉你有文件被修改过，用git diff可以查看修改内容

6.git log
git log命令显示从最近到最远的提交日志

7.git reset --hard HEAD^
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100,穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本,HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id

8.git reflog
Git提供了一个命令git reflog用来记录你的每一次命令.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本

9.
工作区就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

10.git checkout -- file
git checkout -- file可以丢弃工作区的修改：
当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file

11.git reset HEAD <file>
用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

12.git rm
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

13.git remote add origin git@server-name:path/repo-name.git
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

14.git push -u origin master
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

15.git clone
git clone git@github.com:michaelliao/gitskills.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。